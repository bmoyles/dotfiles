function prompt_bmoyles_setup {
    emulate -L zsh
    setopt localoptions
    prompt_opts=(cr percent subst)

    autoload -Uz add-zsh-hook
    add-zsh-hook precmd prompt_bmoyles_precmd

    autoload -Uz vcs_info
    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' max-exports 5
    zstyle ':vcs_info:git*' check-for-changes true
    zstyle ':vcs_info:*' use-quilt false
    zstyle ':vcs_info:git*' unstagedstr "mod"
    zstyle ':vcs_info:git*' stagedstr "stg"
    zstyle ':vcs_info:git*' formats \
        "%r $chars[branch] %b" \
        "%m" \
        "%u" \
        "%c"
    zstyle ':vcs_info:git*' actionformats \
        "%r $chars[branch] %b" \
        "%m" \
        "%u" \
        "%c" \
        "%a"
    zstyle ':vcs_info:git*+set-message:*' hooks git-st git-remotebranch git-untracked


    PROMPT='%{%f%b%k%}$(prompt_bmoyles_build_prompt)'
    RPROMPT='%{%f%b%k%}$(prompt_bmoyles_build_rprompt)'
}

function +vi-git-st() {
    if ((!$1)); then
        local ahead behind
        local -a gitstatus

        behind=$(git rev-list HEAD..origin/${hook_com[branch]} 2>/dev/null | wc -l)
        (( $behind )) && gitstatus+=( "-${behind//[[:space:]]/}" )

        ahead=$(git rev-list origin/${hook_com[branch]}..HEAD 2>/dev/null | wc -l)
        (( $ahead )) && gitstatus+=( "+${ahead//[[:space:]]/}" )

        hook_com[misc]="$FX[bold]$chars[right-arrow]$FX[no-bold]${(j:/:)gitstatus}"
    fi
}

function +vi-git-remotebranch() {
    if ((!$1)); then
        local remote

        # Are we on a remote-tracking branch?
        remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
            --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

        if [[ -n ${remote} ]] ; then
            hook_com[branch]="${hook_com[branch]}->${remote}"
        fi
    fi
}

function +vi-git-untracked() {
    if ((!$1)); then
        if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
            git status --porcelain | grep '??' &> /dev/null ; then
            hook_com[unstaged]="new$FX[bold]$chars[right-arrow]$FX[no-bold]${hook_com[unstaged]}"
        fi
    fi
}

function prompt_bmoyles_precmd {
    emulate -L zsh
    zstyle -T ':prompt:bmoyles' vcs_info && vcs_info
}

function prompt_segment() {
    local bg fg dir
    typeset -x CURBG

    [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
    [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
    dir=$3

    if [[ $CURBG == 'NONE' ]] || [[ $1 == $CURBG ]] \
        || [[ $dir == 'right' ]]; then
        echo -n "%{$bg$fg%}"
    else
        if [[ $dir == 'left' ]]; then
            echo -n " %{$bg%F{$CURBG}%}$SEP%{$fg%} "
        fi
    fi

    [[ -n $4 ]] && print -Pn $4

    if [[ $dir == 'right' ]]; then
        if [[ $CURBG != 'NONE' ]] && [[ $1 != $CURBG ]]; then
            echo -n "%F{$1}$SEP"
        fi
    fi

    CURBG=$1
}

function prompt_end {
    local dir
    typeset -x CURBG

    dir=${1:-left}

    if [[ $CURBG != 'NONE' ]] ; then
        echo -n "%{%k%F{$CURBG}%}$SEP"
    else
        echo -n "%{%k%}"
    fi
    echo -n "%{%f%}"
    [[ $dir == 'left' ]] && CURBG='NONE'
}

function prompt_aws {
        local dir
        dir=$1
        [[ ! -r $AWS_CONFIG_FILE ]] && prompt_segment 33 220 $dir "aws:config unavailable" && return
        prompt_segment 033 0 $dir "aws:${FX[bold]}%F{226}${AWS_CONFIG_FILE:t}%f%F{\$2}${FX[no-bold]}@${FX[bold]}%F{226}${AWS_DEFAULT_REGION}%f%F{\$2}${FX[no-bold]}"
}

function prompt_bmoyles_build_prompt {
    emulate -L zsh

    typeset -x CURBG
    CURBG='NONE'
    SEP=$chars[right-arrow-filled]
    echo -n $prompt_newline
    prompt_segment 027 0 left "%n@%m"
    if zstyle -T ':prompt:bmoyles' aws ; then
        prompt_aws left
    fi
    prompt_end
    echo -n $prompt_newline

    prompt_segment 202 0 left '%/'
    if zstyle -T ':prompt:bmoyles' vcs_info ; then
        local -a vcs_info_colors
        local maxexports last i
        zstyle -s ":vcs_info:*" "max-exports" maxexports
        vcs_info_color=0
        vcs_info_colors=(166 208 172 214 178)
        for (( i = 0; i < maxexports; i++ ))
        do
            if [[ -n ${(P)${:-vcs_info_msg_${i}_}} ]]; then
                (( vcs_info_color++ ))
                prompt_segment $vcs_info_colors[$vcs_info_color] 0 left ${(P)${:-vcs_info_msg_${i}_}}
            fi
        done
    fi
    prompt_end
    echo -n $prompt_newline

    if [[ $UID -eq 0 ]]; then
        prompt_segment 88 255 left '%!'
        prompt_segment 124 255 left '%%#'
    else
        prompt_segment 22 0 left '%!'
        prompt_segment 028 0 left '%%#'
    fi
    prompt_end
}

function prompt_bmoyles_build_rprompt {
    emulate -L zsh

    local tmp

    typeset -x CURBG='NONE'
    SEP=$chars[left-arrow-filled]

    tmp=$(prompt_segment 053 255 right "%D{%l:%M %p}")
    CURBG=053
    tmp=$(prompt_segment 055 255 right "%D{%a %b %e}")$tmp
    CURBG=055
    tmp=$(prompt_end right)$tmp
    echo -n $tmp
}

prompt_bmoyles_setup $*

# vim: ft=zsh sw=4 sts=4 ts=4 expandtab
